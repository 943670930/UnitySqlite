using System.Collections; using System.Collections.Generic; using UnityEngine; using Mono.Data.Sqlite; using System; using System.Reflection; using System.Text;   public class DBManager : MonoBehaviour {  	#region 单例 	static DBManager instance; 	public static DBManager Instance(){ 		return instance; 	} 	void Awake(){ 		instance = this; 	} 	#endregion  	public void DemoTest(){ 		DBTestClass item = new DBTestClass (); 		item.id = 1; 		item.name = "测试名称"; 		item.x = 0.5f; 		item.y = 0.59f;  		Object2DB<DBTestClass> (item); 	}  	// Use this for initialization 	void Start () { 		  	}	 	// Update is called once per frame 	void Update () {		 	}  	#region Base 	//打开数据库链接 	DbAccess Connect(){ 		string dbPath = "data source="+Application.streamingAssetsPath+"/sqliteDB.sqlite"; 		DbAccess db = new DbAccess(dbPath); 		return db; 	} 	//关闭数据库链接 	void Close(DbAccess db){ 		db.CloseSqlConnection(); 	}  	//执行一个语句 	public object ExecuteScalar(string sql){ 		DbAccess db = Connect (); 		object result = db.ExecuteScalar (sql);  		Close (db);  		return result; 	} 	/// <summary> 	/// Executes the scalar int. 	/// 执行语句,并返回一个int 	/// </summary> 	/// <returns>The scalar int.</returns> 	/// <param name="sql">Sql.</param> 	public int ExecuteScalarInt(string sql){ 		return Convert.ToInt32(ExecuteScalar(sql)); 	}   	#endregion    	#region Tools  	/// <summary> 	/// Creates the object. 	/// 读取reader中数据,用数据实例化一个类 	/// </summary> 	/// <returns>The object.</returns> 	/// <param name="sqReader">Sq reader.</param> 	/// <typeparam name="T">The 1st type parameter.</typeparam> 	public T DB2Object<T>(SqliteDataReader sqReader){ 		//实例化一个空类 		T newObject = System.Activator.CreateInstance<T>(); 		//获取类型 		Type type = newObject.GetType (); 		//获取类型中所有public属性 		FieldInfo[] fields =  type.GetFields ();//BindingFlags.Public); 		//遍历所有属性 		foreach (FieldInfo field in fields) { 			string attrName = field.Name;//获取属性名 			int colIndex = sqReader.GetOrdinal (attrName);//获取这个属性在reader中的位置 			//从reader中取值 			object newValue = new object(); 			if (field.FieldType == typeof(int)) { 				newValue = sqReader.GetInt32 (colIndex); 			}  else if (field.FieldType == typeof(string)) { 				newValue = sqReader.GetString (colIndex); 			}  else if(field.FieldType == typeof(float)){ 				newValue = sqReader.GetFloat (colIndex); 			} 			//赋值给属性 			type.GetField (attrName).SetValue (newObject,newValue); 		} 		return newObject; 	}    	/// <summary> 	/// Object insert Into the DB. 	/// 将一个实例存储到数据库. 	/// </summary> 	/// <param name="obj">Object.</param> 	/// <typeparam name="T">The 1st type parameter.</typeparam> 	public void Object2DB<T>(T obj){  		string sql; 		//获取类型 		Type type = obj.GetType (); 		string tableName = type.Name; 		if(!TableExists (tableName)){ 			CreateTableWithObject (obj); 		} 		//判断是新增还是更新,id从1开始,所以当传入id为0时,即认为是新增,或者传入id不存在时,也认为是新增 		bool isUpdate = true;  		string id = type.GetField ("id").GetValue (obj).ToString(); 		if (Convert.ToInt32 (id) == 0) {//如果为0,则获取一个新的ID 			sql = "select ifnull(max(id),0)+1 from {0}"; 			sql = string.Format (sql, tableName); 			int newId = Convert.ToInt32 (ExecuteScalar (sql)); 			type.GetField ("id").SetValue (obj, newId); 			isUpdate = false; 		}  else {//判断id是否存在 			sql = "select count(1) from {0} where id = {1}"; 			sql = string.Format (sql,tableName,id); 			int returnValue = Convert.ToInt32( ExecuteScalar (sql)); 			if(returnValue == 0){//新增 				isUpdate = false; 			}			 		}  		if (isUpdate) {//更新 			ObjectUpdateDB<T>(obj); 		}  else {//新增 			ObjectInsertDB<T>(obj); 		}   	} 	/// <summary> 	/// Objects the insert to DB. 	/// 将一个对象插入数据库 	/// </summary> 	/// <param name="obj">Object.</param> 	/// <typeparam name="T">The 1st type parameter.</typeparam> 	public void ObjectInsertDB<T>(T obj){ 		//获取类型 		Type type = obj.GetType (); 		//获取新ID 		string tableName = type.Name; 		string sql = "select ifnull(max(id),0)+1 from {0}"; 		sql = string.Format (sql,tableName); 		int newId = Convert.ToInt32( ExecuteScalar (sql)); 		type.GetField ("id").SetValue (obj,newId);   		//获取类型中所有public属性 		FieldInfo[] fields =  type.GetFields ();//BindingFlags.Public); 		//整理全部属性名称,和属性的值 		List<string> colNameList = new List<string> (); 		List<string> valueList = new List<string> (); 		//遍历所有public属性 		foreach (FieldInfo field in fields) { 			string attrName = field.Name;//获取属性名 			colNameList.Add(attrName); 			string valueStr = field.GetValue (obj).ToString(); 			valueList.Add (valueStr); 		}  		//新增 		StringBuilder colNames = new StringBuilder(20); 		StringBuilder values = new StringBuilder(20); 		for (int i = 0; i < colNameList.Count; i++) { 			values.Append ("'"); 			colNames.Append (colNameList[i]); 			values.Append (valueList[i]); 			colNames.Append (","); 			values.Append ("',"); 		} 		colNames.Remove (colNames.Length-1,1); 		values.Remove (values.Length-1,1);  		sql = "insert into {0} ({1}) values ({2})"; 		sql = string.Format (sql,tableName,colNames.ToString(),values.ToString());   		ExecuteScalar (sql); 	} 	/// <summary> 	/// Objects the update DB. 	/// 将一个对象更新到数据库 	/// </summary> 	/// <param name="obj">Object.</param> 	/// <typeparam name="T">The 1st type parameter.</typeparam> 	public void ObjectUpdateDB<T>(T obj){ 		//获取类型 		Type type = obj.GetType ();  		//获取类型中所有public属性 		FieldInfo[] fields =  type.GetFields ();//BindingFlags.Public); 		//整理全部属性名称,和属性的值 		List<string> colNameList = new List<string> (); 		List<string> valueList = new List<string> (); 		//遍历所有public属性 		foreach (FieldInfo field in fields) { 			string attrName = field.Name;//获取属性名 			colNameList.Add(attrName); 			string valueStr = field.GetValue (obj).ToString(); 			valueList.Add (valueStr); 		}  		//更新 		StringBuilder updateValue = new StringBuilder(20); 		for (int i = 0; i < colNameList.Count; i++) { 			string newValue = string.Format ("{ 0}='{ 1}'",colNameList[i],valueList[i]); 			updateValue.Append (newValue); 			if(i!=colNameList.Count-1){ 				updateValue.Append (","); 			} 		} 		string sql = "update {0} set {1} where id = {2}"; 		string tableName = type.Name; 		string id = type.GetField ("id").GetValue (obj).ToString(); 		sql = string.Format (sql,tableName,updateValue.ToString(),id);   		ExecuteScalar (sql); 	}  	/// <summary> 	/// Tables the exists. 	/// 判断表是否存在 	/// </summary> 	/// <returns><c>true</c>, if exists was tabled, <c>false</c> otherwise.</returns> 	/// <param name="tableName">Table name.</param> 	public bool TableExists(string tableName){ 		string sql = string.Format("select count(1) from sqlite_master where type = 'table' and name = '{ 0}'",tableName); 		int returnValue = ExecuteScalarInt (sql); 		if (returnValue != 0) { 			return true; 		}  else { 			return false; 		} 	}  	/// <summary> 	/// Creates the table with object. 	/// </summary> 	/// <param name="obj">Object.</param> 	public void CreateTableWithObject(object obj){ 		Type type = obj.GetType (); 		//获取类型中所有public属性 		FieldInfo[] fields =  type.GetFields ();//BindingFlags.Public); 		StringBuilder value = new StringBuilder("id integer PRIMARY KEY,"); 		//遍历所有public属性 		foreach (FieldInfo field in fields) { 			string attrName = field.Name;//获取属性名 			if(!string.Equals(attrName,"id")){ 				string newValue = ""; 				if (field.FieldType == typeof(int)) { 					newValue = string.Format("{ 0} integer,",attrName); 				}  else if (field.FieldType == typeof(string)) { 					newValue = string.Format("{ 0} text,",attrName); 				}  else if(field.FieldType == typeof(float)){ 					newValue = string.Format("{ 0} real,",attrName); 				} 				value.Append (newValue); 			}  		} 		value.Remove (value.Length - 1, 1); 		string tableName = type.Name; 		string sql = string.Format ("create table if not exists { 0}({ 1})",tableName,value.ToString()); 		ExecuteScalar (sql); 	}   	#endregion    }      public class DBTestClass{ 	public int id; 	public string name; 	public float x; 	public float y;  } 